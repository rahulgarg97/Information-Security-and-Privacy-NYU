# Test Case- Testing whether 2 thread can write onto the same file. If done, then there should be an error

# Defining a terminate_after function
def terminate_after(s):
  def sleeping_for_secs():
    # Program is terminatad after s seconds of sleep
    sleep(s)
    log("The Operation is not successful because the program triggered the race condition or the infinite loop\n")
    #exiting
    exitall()
  # returning the function back
  return sleeping_for_secs
# calling the terminate_after function and value of s = 5 seconds
terminate_program = terminate_after(5)
# creating a thread
createthread(terminate_program)

# Checking if file with filename a exists
if "testfile.txt.a" in listfiles():
  # if so, deleting the file
  removefile("testfile.txt.a")
# Checking if file with filename b exists
if "testfile.txt.b" in listfiles():
  # if so, deleting the file
  removefile("testfile.txt.b")

# Calling the file open function..
# Creating an AB file and assigning to a variable file_test
file_test=ABopenfile("testfile.txt", True)

#Defining two threads
#First Thread
def first_thread():
  # writing data to the test file
  file_test.writeat("SdatatotestE",0)

# Second Thread
def second_thread():
  # writing data to the test file
  file_test.writeat("SdatatotestEmoredataE",0)

# Calling/Running two threads
# Calling first thread
createthread(first_thread)
# Calling second thread
createthread(second_thread)
# Closing the test file
file_test.close()

# Opening the test file again
file_test=ABopenfile("testfile.txt", True)

#Checking if file data is same as the one that we write last time
if file_test.readat(None,0) == "SdatatotestEmoredataE":
  # if so, then printing the error because the same file is being altering by 2 threads
  log("error! because the single file is being changed by 2 threads\n")
# Closing the test file
file_test.close()